---
title: "Claims anomaly report"
author: Allianz CDO - AAC
geometry: margin=2cm
output: pdf_document       
---


```python, echo=False, name='import packages'
import sys, os, warnings, datetime, adtk

warnings.filterwarnings("ignore")

#sys.path.insert(0, '/app/src/')          # add to $PYTHONPATH
#sys.path.insert(0, '/work/claims-reporting/src/')          # add to $PYTHONPATH
sys.path.insert(0, os.environ['UC_CODE_DIR'])          # add to $PYTHONPATH at position 0

import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import seaborn as sns
import pandas as pd
import numpy as np
from tabulate import tabulate              # markdown tables
from copy import deepcopy
from importlib import reload
from statsmodels.tsa.seasonal import seasonal_decompose
from adtk.visualization import plot
from aac_ts_anomaly.utils import utils_func as util
from aac_ts_anomaly.services import file
from aac_ts_anomaly.config import global_config as glob
from aac_ts_anomaly.resources import config
import statsmodels.api as sm
from datetime import date

pd.set_option('display.max_rows', 10**5)
pd.set_option('display.max_columns', 10**5)
```



```python echo=False, name='set configurations'

# Initialize logger:
logger_all_combi = util.module_logger(__name__+'.source_all', glob.UC_DATA_PKG_DIR+'source_all_combi.log')

# Set parameters:
periodicity = 52               # set seasonal period

config_input = config.in_out52['input']
config_output = config.in_out52['output']
config_detect = config.in_out52['detection']

#filename = list(config_input['service']['XLSXService'].values())[0]        # in case you want specific xls file not just the newest

filename = util.get_newest_file(search_for = "AGCS CCO CRA - Notification Counts")           # weekly, take newest input

aggreg_level, pre_filter, ignore_lag, min_sample_size, min_median_cnts = list(config_detect['preprocessing'].values())

hyper_para = config_detect['training']['hyper_para']
stat_transform = config_detect['training']['stat_transform']
#outlier_filter = config_detect['training']['outlier_filter']           # all older than this filter out
```


```python, echo=False, width=1000, name='import and preprocess data'

warnings.filterwarnings("ignore")

#xls = file.XLSXService(path=filename, dtype= {'time': str}, sheetname='data', index_col=None, header=0, root_path=glob.UC_DATA_DIR)
xls = file.XLSXService(path=filename, dtype= {'claim_creation_week': str}, 
                        sheetname='data', index_col=None, header=0, root_path=glob.UC_DATA_DIR)

data_orig = xls.doRead()

logger_all_combi.info('Data imported: {}'.format(data_orig.shape))

######### THIS MUST BE REMOVED SOON!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

data_orig['claim_creation_week'] = data_orig['claim_creation_week'].apply(lambda x : x[:4]+'-'+x[4:]) # Make dates as in the future...
data_orig.rename(columns={'claim_creation_week' : 'time', 'clm_cnt' : 'target' }, inplace=True)

claims = util.claims_reporting(periodicity = periodicity)
outlier_filter = claims.outlier_filter          # use updated outlier filter

gen = claims.process_data(data_orig, verbose=False, aggreg_level = 'all_combi')
all_series = list(gen)      # needed for task descriptions...

```

<br>

## Task description:

- Detection of anomalies in number of claims created per week, $y_{t}$, with time index $t$ weeks

- Used time window: <% print(claims.min_year_period)%> to <% print(claims.time_index[claims.max_period_index - ignore_lag])%> ('year-calendar week')

- Not reporting anomalies before <% print(outlier_filter)%>  


<br>

### Figures below:

- Plot 1: Original time series with all detected claims anomalies (red lines), see title for current anomaly 

- Plot 2: Descriptive trend analysis

- Plot 3: Descriptive seasonal analysis (monthly/weekly frequency)

- Plot 4: Predicted claims, $\hat{y}_t$ with observed claim counts $y_t$  

- Plot 4b/c (optional): Time series decomposition: $y_t = m_{t} \cdot s_{t} \cdot \epsilon_{t}$ into trend ($m_t$), season ($s_t$) and residual component ($\epsilon_t$)

<br>

### Report summary:


```python echo=False, name='run all'

train0 = util.trainer(periodicity = periodicity, verbose=False)

results_all, results_new = train0.run_all(data_orig = data_orig, verbose=False, aggreg_level = 'all_combi')   # write_table = False

results_final = deepcopy(results_new)      # only show new outliers excluding ones shown before
#results_final = deepcopy(results_all)      # show all detected outliers potentially including ones shown before

results = deepcopy(results_final)
results.rename(columns={'time_anomaly': 'Time', 'time_series_name': 'Time series', 'target': 'Claim counts'}, inplace=True)
results.reset_index(inplace=True, drop=True)

```

<% if results.shape[0]==0: print("No recent anomalies detected!") %>

<% if results.shape[0]>0: print('Detected {} new claim anomalies:'.format(results.shape[0])) %>

<% if results.shape[0]>0: print(tabulate(results, tablefmt="pipe", headers="keys", showindex=True)) %>

<br>

```python echo=False, name='prepare search list'

all_series = train0.all_series

where = np.where(np.array(train0.time_index) == outlier_filter)[0][0]
outlier_search_list = train0.time_index[where:]
```

\newpage

# 1. Whole claims portfolio  

First the time series of claim counts for the fully aggregated (by OE/LoB/Region/Source system) portfolio is depicted:

&nbsp;


```python echo=False

label, sub_set = all_series[len(all_series)-1]
df = deepcopy(sub_set)

train1 = util.trainer(periodicity = periodicity, verbose=False)
fitted = train1.fit(df = df)
out = fitted.predict(detect_thresh = None)

y = fitted.ts_values

#if out.nof_outliers > 0:
#    outlier_dates = out.outlier_dates
#    filt = [outl in outlier_search_list for outl in outlier_dates]
#    filtered_outliers = np.array(outlier_dates)[filt].tolist()

p0 = plot(fitted.val_series, anomaly_true = fitted.anomalies, ts_linewidth=2.0, ts_markersize=6, 
     at_markersize=5, at_color='red', freq_as_period=False, ts_alpha=0.8, at_alpha=0.5, 
     title = 'Plot 1: All')
     
#'Plot 1: '+label +': '+ str(len(filtered_outliers)) + ' outlier(s) detected!\n\n' + 'Occured at year-calendar week(s): '+', #'.join(filtered_outliers)+'\n'

#fig_A = plt.figure(figsize=(17, 5), dpi=100)
#plt.plot(y.index, y, color='tab:blue', linestyle='-', marker='o', markerfacecolor='orange', linewidth=2)
#plt.gca().set(title='', xlabel="weeks", ylabel="Number of claims", ylim = plt.ylim(), xlim=plt.xlim())   #plt.xlim(left=0)
#locs, labels = plt.xticks()
#plt.xticks(y.index[0::3], labels=df['time'].to_numpy()[0::3], rotation=60)
#plt.title('Plot 1: All', fontdict = {'fontsize' : 17})
#plt.tight_layout()  
 
plt.show()

# Anomaly probabilities:
#-------------------------
#plt.figure(figsize=(12,4), dpi=100)
#pro = plt.plot(fitted.anomaly_proba.index, fitted.anomaly_proba, color='tab:blue',label="prob. of anomaly", linestyle='--', #marker='o', markerfacecolor='orange', linewidth=1)
#plt.plot(fitted.anomaly_proba.index, [fitted.detect_thresh]*len(fitted.anomaly_proba.index), label="decision threshold")
#plt.gca().set(title="", xlabel="time", ylabel="probability", ylim = plt.ylim(-0.02, 1))   #plt.xlim(left=0)
#locs, labels = plt.xticks()
#plt.title(r'Anomaly probabilities $\pi_{t}, t=1,...,T$', fontdict = {'fontsize' : 14})
#plt.legend(loc='upper left')
#plt.tight_layout()
#plt.show()  

#--------------------------------------------------------------------------

# Draw Boxplot
#--------------
#fig, axes = plt.subplots(1, 2, figsize=(14.5,5.5), dpi= 80)
#sns.boxplot(x='year', y='clm_cnt', data=sub_set, ax=axes[0])
#sns.boxplot(x='week', y='clm_cnt', data=sub_set)
#axes[0].set_title('Plot 2: Year-wise Box plots (Trend)', fontsize=13.8) 
#axes[1].set_title('Plot 3: Week-wise Box plots (Seasonality)', fontsize=13.8)

if periodicity == 52 :
    fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15,6), dpi= 80)
if periodicity == 12 :    
    fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15,6), dpi= 80)
    
sns.boxplot(x='year', y='target', data=sub_set, ax=axes[0]).set(xlabel='years', ylabel="counts")
sns.boxplot(x='month', y='target', data=sub_set, ax=axes[1]).set(xlabel='months', ylabel="counts")

if periodicity == 52 :
    sns.boxplot(x='period', y='target', data=sub_set, ax=axes[2], orient='v').set(
    xlabel='weeks', ylabel="counts")

# Set Titles
axes[0].set_title('Plot 2: Yearly box plots\n(Trend)', fontsize=13.8) 
axes[1].set_title('Plot 3: Monthly box plots\n(Seasonality)', fontsize=13.8)

if periodicity == 52 :
    axes[2].set_title('Plot 3b: Weekly box plots\n(Seasonality)', fontsize=13.8)
    
#plt.yticks(rotation=15)
plt.xticks(rotation=45)

fig.tight_layout(pad=3.0)


# Forecast time series:
#-------------------------------------------------------------    
n_step_ahead = list(config_detect['prediction'].values())[0]
#endog = np.log(1 + y).to_numpy()

endog = y
mod_uc = sm.tsa.UnobservedComponents(endog, 
                                     'smooth trend',
                                     #'local level',
                                     #'random trend',
                                     #'local linear trend',  
                                     cycle=True, 
                                     seasonal = periodicity, 
                                     irregular=False,
                                     #autoregressive = 1,
                                     #stochastic_level=True, 
                                     stochastic_cycle=True, 
                                     damped_cycle=False)
                                     
res_uc = mod_uc.fit(method='powell', disp=False)

fig_B = res_uc.plot_components(level=False, trend=True, seasonal=True, cycle=False, legend_loc='upper left', figsize=(18, 4))
axesUC = fig_B.get_axes()
axesUC[0].set_xlabel('time index')
axesUC[0].set_title("Plot 4: Forecast number of claims - "+label, fontsize=14.5)
b = axesUC[0].set_ylabel('claim counts')

#start, end = axesUC[0].get_xlim()
#tm = np.linspace(start, end, num=len(y.index[0::5]))
#axesUC[0].xaxis.set_ticks(tm)
#a = axesUC[0].set_xticklabels(labels=df['time'].to_numpy()[0::5], rotation=60)

#yhat = res_uc.forecast(steps=n_step_ahead)[0] #.values[0]            # point forecast
#yhat = np.exp(yhat)-1                                         # revert transformation
#last_obs = y.index[len(y)-1].date()
#next_week = last_obs + datetime.timedelta(weeks=1)
#predict_mle = res_uc.get_prediction()
#yhat_means = np.exp(predict_mle.predicted_mean)-1 #.apply(lambda x: np.exp(x)-1)
#predict_mle_ci = predict_mle.conf_int()
#lower = predict_mle_ci[:,0] #['lower clm_cnt']
#upper = predict_mle_ci[:,1] #['upper clm_cnt']
#yhat_lower = np.exp(lower)-1   #.apply(lambda x: np.exp(x)-1)
#yhat_upper = np.exp(upper)-1   #.apply(lambda x: np.exp(x)-1)

# Plot ground truth:
#-------------------
#fig, ax = plt.subplots(figsize=(12,4), dpi=80)
#y.plot(ax=ax, style='-', label='Observed', linewidth=1, title = "Plot 4: Forecast number of claims - "+label)

# Add predictions:
#--------------------
#pd.Series(yhat_means, index=y.index).plot(ax=ax, style='--', label='One-step-ahead forecast', linewidth=1.2)
#ax.set_xlabel("calendar weeks") ; 
#ax.set_ylabel("claim counts")
#ax.set_ylabel("(log) claim counts")
#ax.legend(loc='upper left')
#plt.show()

# Logging
#plt.figure(figsize=(1,1))
#plt.text(0.1, 0.1, '', ha='center', va='center', size=1, wrap=True)
#plt.axis('off')
#plt.show() 


# Multiplicative Decomposition:
#----------------------------------
#result_mul = seasonal_decompose(y, model='multiplicative', extrapolate_trend='freq', freq=52)
#plt.rcParams.update({'figure.figsize': (13,8)})
#fig_dc = result_mul.plot() 
#axes_dc = fig_dc.get_axes()
#axes_dc[0].set_title('Plot 5: Time series decomposition - '+label, fontsize=14.5)
#plt.show()
    
```

\newpage


# 2. Detected anomalies

<% if results.shape[0]>0: print('Next specific views of the claims portfolio for which recent anomalous movements were detected are shown:') %>

&nbsp;

```python, echo=False, width=800

new_anomalies = list(set(results_final['time_series_name']))

#tt = []
for label, val in train0.filt_suspects_plot.items():
    
    if label in new_anomalies:

        fitted_val_series = val['val_series']
        y = fitted_val_series
        fitted_anomalies = val['anom_flag']
        anomaly_proba = val['anom_evidence']           # anomaly probabilities
        filtered_outliers = train0.filt_suspects_values[label]['anomaly_dates']
        sub_set = train0.filt_suspects_plot[label]['df']

        inside = ''    
        if label in list(train0.level_wise_aggr.keys()):
            inside = train0.level_wise_aggr[label]       # then shows over which set it was aggregated    

            main = label +':\n\n '+ str(len(filtered_outliers)) + \
                    ' outlier(s) detected!\n' + 'Occured at year-period(s): '+ \
                    ', '.join(filtered_outliers)+'\n'+'\nAggregated over: '
            for i in inside: main += str(i)+'\n'

        else:
            main = 'Plot 1: '+label +':\n\n '+ str(len(filtered_outliers)) + \
                ' outlier(s) detected!\n' + 'Occured at year-period(s): '+ \
                ', '.join(filtered_outliers)+'\n'

        # Plot 1:
        #---------
        p1 = plot(fitted_val_series, anomaly_true = fitted_anomalies, ts_linewidth=2, ts_markersize=6, 
             at_markersize=5, at_color='red', freq_as_period=False, ts_alpha=0.8, at_alpha=0.5, 
             title = main)

        plt.show()

        # Anomaly probabilities:
        #-------------------------
        #plt.figure(figsize=(10,2), dpi=80)
        #plt.plot(anomaly_proba.index, anomaly_proba, color='tab:blue', linestyle='--', marker='o', markerfacecolor='orange', linewidth=1)
        #plt.gca().set(title="", xlabel="time", ylabel="probability", ylim = plt.ylim(-0.02, 1))   #plt.xlim(left=0)
        #locs, labels = plt.xticks()
        #plt.xticks(y.index[0::3], labels=df['time'].to_numpy()[0::3], rotation=60)
        #plt.title(r'Anomaly probabilities $\pi_{t}, t=1,...,T$', fontdict = {'fontsize' : 13})
        #plt.tight_layout()
        #plt.show()  


        # Plot 2 + 3:
        #--------------------------------------------------------------------------
        # Draw Boxplot
        fig_C, axes_C = plt.subplots(1, 2, figsize=(14.5,5.5), dpi= 80)
        sns.boxplot(x='year', y='target', data=sub_set, ax=axes_C[0]).set(xlabel='years', ylabel="counts")
        
        if periodicity == 12 : 
            sns.boxplot(x='month', y='target', data=sub_set).set(xlabel='months', ylabel="counts") 

        if periodicity == 52 :
            sns.boxplot(x='period', y='target', data=sub_set).set(xlabel='weeks', ylabel="counts") 

        axes_C[0].set_title('Plot 2: Yearly Box plots (Trend)', fontsize=13.8) 
        if periodicity == 12 :
            axes_C[1].set_title('Plot 3: Monthly Box plots (Seasonality)', fontsize=13.8)
        if periodicity == 52 :
            axes_C[1].set_title('Plot 3: Weekly Box plots (Seasonality)', fontsize=13.8)
        
        plt.xticks(rotation=65)
        fig_C.tight_layout()
        
        plt.show()


        # Forecast time series:
        #------------------------  
        #n_step_ahead = list(config_detect['prediction'].values())[0]
        #endog = np.log(1 + y).to_numpy()
        
        endog = y
        mod_uc = sm.tsa.UnobservedComponents(endog, 
                                             'smooth trend',
                                             #'local linear trend', 
                                             cycle=True, 
                                             seasonal = periodicity, 
                                             irregular=False,
                                             #autoregressive = 1,
                                             #stochastic_level=True, 
                                             stochastic_cycle=True, 
                                             damped_cycle=False)

        res_uc = mod_uc.fit(method='powell', disp=False)

        # Plot 4:
        #----------
        figD = res_uc.plot_components(level=False, trend=False, seasonal=False, cycle=False, legend_loc='upper left', figsize=(18, 4))
        axesUC2 = figD.get_axes()
        axesUC2[0].set_xlabel('time index')
        axesUC2[0].set_title("Plot 4: Forecast number of claims - "+label, fontsize=14.5)
        f = axesUC2[0].set_ylabel('claim counts')
        plt.show()
    
        #yhat = res_uc.forecast(steps=n_step_ahead)[0] #.values[0]            # point forecast
        #yhat = np.exp(yhat)-1                                             # revert transformation
        #last_obs = y.index[len(y)-1].date()
        #next_week = last_obs + datetime.timedelta(weeks=1)
        #tt.append('{} ({}): {} claims'.format(label, next_week, int(yhat)))

        #predict_mle = res_uc.get_prediction()
        #yhat_means = np.exp(predict_mle.predicted_mean)-1 #.apply(lambda x: np.exp(x)-1)
        #predict_mle_ci = predict_mle.conf_int()
        #lower = predict_mle_ci[:,0] #['lower clm_cnt']
        #upper = predict_mle_ci[:,1] #['upper clm_cnt']
        #yhat_lower = np.exp(lower)-1   #.apply(lambda x: np.exp(x)-1)
        #yhat_upper = np.exp(upper)-1   #.apply(lambda x: np.exp(x)-1)

        # Plot ground truth:
        #-------------------
        #fig, ax = plt.subplots(figsize=(12,4), dpi=80)
        #y.plot(ax=ax, style='-', label='Observed', linewidth=1, title = "Plot 4: Forecast number of claims - "+label)

        # Add predictions:
        #--------------------
        #pd.Series(yhat_means, index=y.index).plot(ax=ax, style='--', label='One-step-ahead forecast', linewidth=1.2)
        #ax.set_xlabel("calendar weeks") ; 
        #ax.set_ylabel("claim counts")
        ##ax.set_ylabel("(log) claim counts")
        #ax.legend(loc='upper left')        

```


```python results='raw', echo=False
# One step ahead forecasts of the above series: 
#for i in tt:
#    print (
#      f"""
#    - {i}\n
#      """)
```